apply plugin: 'com.android.application'

android {
	signingConfigs {
		config {
			keyAlias 'alias'
			keyPassword 'pwd'
		}
	}
	compileSdkVersion 26
//	Removed this, because Android Studio 3.0.1 advised me to do this. If you are using an older
//  version, maybe you have to uncomment this line:
//	buildToolsVersion '25.0.0'
	buildToolsVersion '26.0.2'
	defaultConfig {
		applicationId "at.ac.tuwien.caa.docscan"
		minSdkVersion 14
		targetSdkVersion 25
		// Fixes the issue that new gradle cannot refer to color library:
		// https://stackoverflow.com/questions/46947008/updated-android-studio-to-3-0-and-getting-this-issue
		vectorDrawables.useSupportLibrary = true
		versionCode 10
		versionName "1.1.3"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	// Fixed build error : Duplicate files copied in APK META-INF/xxx
	packagingOptions {
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE.txt'
		exclude 'META-INF/LICENSE.txt'
	}

// Android NDK configuration, taken from:
//    https://www.crystax.net/en/blog/3

	sourceSets.main.jni.srcDirs = [] // disable automatic ndk-build call, which ignore our Android.mk
	sourceSets.main.jniLibs.srcDir 'src/main/libs'

	// call regular ndk-build(.cmd) script from app directory
	task ndkBuild(type: Exec) {
		workingDir file('src/main')
		commandLine getNdkBuildCmd(), 'NDK_LIBS_OUT=./jniLibs'
	}

	task cleanNative(type: Exec, description: 'Clean JNI object files') {
		commandLine getNdkBuildCmd(),
				'-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
				'clean'
	}

	clean.dependsOn 'cleanNative'

	tasks.withType(JavaCompile) {
		compileTask -> compileTask.dependsOn ndkBuild
	}

	clean.dependsOn cleanNative

}


def getNdkDir() {
	if (System.env.ANDROID_NDK_ROOT != null)
		return System.env.ANDROID_NDK_ROOT

	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def ndkdir = properties.getProperty('ndk.dir', null)
	if (ndkdir == null)
		throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

	return ndkdir
}

def getNdkBuildCmd() {
	def ndkbuild = getNdkDir() + "/ndk-build"
	// TODO: check why we cannot include package Os:
//    if (Os.isFamily(Os.FAMILY_WINDOWS))
	ndkbuild += ".cmd"

	return ndkbuild
}

dependencies {
	compile fileTree(include: ['*.jar'], dir: 'libs')
	testCompile 'junit:junit:4.12'
	compile 'com.android.support:appcompat-v7:26.1.0'
	compile 'com.dropbox.core:dropbox-core-sdk:3.0.3'
//    compile 'com.squareup.okhttp3:okhttp:3.5.0'
	compile 'com.android.support:preference-v7:25.0.0'
	compile 'com.android.support:design:25.0.0'
	compile 'com.android.support:gridlayout-v7:26.1.0'
	compile 'com.android.volley:volley:1.0.0'
	compile 'com.firebase:firebase-jobdispatcher:0.8.4'
	compile 'com.github.smart-fun:XmlToJson:1.4.0'    // necessary for xmltojson
	// retrofit - start:
	compile 'com.squareup.retrofit2:retrofit:2.3.0'
	compile 'com.squareup.okhttp3:okhttp:3.6.0'
	compile 'com.squareup.retrofit2:converter-gson:2.3.0'   // necessary for retrofit
	compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
	// retrofit - end:
	compile 'com.koushikdutta.ion:ion:2.+'
	compile project(':openCVLibrary310')
	compile 'com.google.android.gms:play-services-auth:11.4.0' // we need this for the ProviderInstaller
	compile 'me.dm7.barcodescanner:zxing:1.9.8'

}
